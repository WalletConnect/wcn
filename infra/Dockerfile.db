################################################################################
#
# Build args
#
################################################################################
ARG                 BASE="rust:1.89-bullseye"
ARG                 RUNTIME="debian:bullseye-slim"
ARG                 VERSION="unknown"
ARG                 SHA="unknown"
ARG                 MAINTAINER="WalletConnect"
ARG                 PROFILE="release"
ARG                 LOG_LEVEL="debug"
ARG                 WORK_DIR="/app"
ARG                 TARGET_BIN="wcn_db"

################################################################################
#
# Parameters for release builds
#
################################################################################
FROM                ${BASE} AS build-release
ENV                 BUILD_SHARED_ARGS="--profile release-debug"
ENV                 BUILD_PROFILE_DIR="release-debug"

################################################################################
#
# Parameters for debug builds
#
################################################################################
FROM                ${BASE} AS build-debug
ENV                 BUILD_SHARED_ARGS=""
ENV                 BUILD_PROFILE_DIR="debug"

################################################################################
#
# Build the binary
#
################################################################################
FROM                build-${PROFILE} AS build

ARG                 LOG_LEVEL
ARG                 WORK_DIR
ARG                 TARGET_BIN

RUN                 apt-get update && apt-get install -y --no-install-recommends clang llvm libclang1 libclang-dev liburing-dev

WORKDIR             ${WORK_DIR}

# Build the local binary
COPY                . .
RUN                 cargo build -p ${TARGET_BIN} ${BUILD_SHARED_ARGS}

# Put the artifacts to a known path so we don't have to pass an extra arg to the runtime image
RUN                 ln -s ${WORK_DIR}/target/${BUILD_PROFILE_DIR} ${WORK_DIR}/target/out

################################################################################
#
# Runtime image
#
################################################################################
FROM                ${RUNTIME} AS runtime

ARG                 VERSION
ARG                 SHA
ARG                 MAINTAINER
ARG                 WORK_DIR
ARG                 LOG_LEVEL
ARG                 TARGET_BIN

LABEL               version=${VERSION}
LABEL               sha=${SHA}
LABEL               maintainer=${MAINTAINER}

RUN                 apt-get update \
  && apt-get install -y --no-install-recommends ca-certificates libssl-dev procps linux-perf liburing-dev \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/*

WORKDIR             ${WORK_DIR}

COPY --from=build   ${WORK_DIR}/target/out/${TARGET_BIN} /usr/local/bin/${TARGET_BIN}

# Preset the `LOG_LEVEL` env var based on the global log level.
ENV                 LOG_LEVEL="info,wcn_db=${LOG_LEVEL}"

RUN                 mkdir /wcn && chown 1001:1001 /wcn

USER                1001:1001
ENTRYPOINT          ["/usr/local/bin/wcn_db"]
