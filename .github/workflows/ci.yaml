name: ci

on:
  release:
    types: ["published"]

  pull_request:
    paths:
      - "src/**"
      - "crates/**"
      - "Cargo.toml"
      - "Dockerfile"
      - "build.rs"

  workflow_dispatch:
    inputs:
      push:
        description: "Push to Docker Registry"
        required: false
        default: "false"
        type: choice
        options:
          - "false"
          - "true"

permissions:
  contents: read
  packages: write

concurrency:
  # Support push/pr as event types with different behaviors each:
  # 1. push: queue up builds
  # 2. pr: only allow one run per PR
  group: ${{ github.workflow }}-${{ github.event_name }}${{ github.event.pull_request.number }}
  # If there is already a workflow running for the same pull request, cancel it
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  AWS_REGION: "eu-central-1"

jobs:
  tests:
    name: "${{ matrix.cargo.name }}"
    runs-on:
      group: ubuntu-runners
    strategy:
      fail-fast: false
      matrix:
        cargo:
          - name: "clippy"
            cmd: cargo clippy --workspace --all-targets --all-features --tests -- -D warnings
            rust: nightly-2025-02-23
          - name: "formatting"
            cmd: cargo fmt --all --check
            rust: nightly-2025-02-23
          - name: "tests"
            cmd: |
              cargo test --workspace --doc --all-features \
              && RUST_LOG=info cargo test --all-features --workspace --exclude wcn_node \
              && RUST_LOG=info,openraft=error,relay_rocks=warn cargo test --all-features --release
            rust: 1.85.0
    env:
      RUST_BACKTRACE: full
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: "Install Rust ${{ matrix.cargo.rust }}"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.cargo.rust }}
          profile: default
          override: true

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y liburing-dev pkg-config llvm clang libclang1 libclang-dev build-essential

      - uses: Swatinem/rust-cache@v2

      - uses: taiki-e/install-action@v1
        with:
          tool: nextest

      - name: "Validate ${{ matrix.cargo.name }}"
        run: ${{ matrix.cargo.cmd }}

  cargo-deny:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: EmbarkStudios/cargo-deny-action@v2
        with:
          rust-version: "1.85.0"
          command: check license

  build:
    name: "Build image"
    runs-on:
      group: ubuntu-runners
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build, tag and cache the image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          tags: wcn:tmp
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image-wcn.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-wcn
          path: /tmp/image-wcn.tar

  publish_to_ghcr:
    needs: [tests, build, cargo-deny]
    name: "Publish image to GHCR"
    runs-on: ubuntu-latest
    steps:
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta_ghcr
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/walletconnectfoundation/wcn-node
          flavor: |
            latest=auto
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: image-wcn
          path: /tmp

      - name: Push image
        run: |
          docker load --input /tmp/image-wcn.tar

          readarray -t tags <<< "${{ steps.meta_ghcr.outputs.tags }}"
          for tag in "${tags[@]}"; do
              docker tag wcn:tmp $tag
          done

          docker image push --all-tags ghcr.io/walletconnectfoundation/wcn-node

  publish_to_ecr:
    needs: [tests, build, cargo-deny]
    name: "Publish image to ECR"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        images:
          - repo_name: irn
            aws-access-key-id: AWS_ACCESS_KEY_ID
            aws-secret-access-key: AWS_SECRET_ACCESS_KEY
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets[matrix.images.aws-access-key-id] }}
          aws-secret-access-key: ${{ secrets[matrix.images.aws-secret-access-key] }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ steps.login-ecr.outputs.registry }}/${{ matrix.images.repo_name }}
          flavor: |
            latest=auto
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: image-wcn
          path: /tmp

      - name: Push image
        run: |
          docker load --input /tmp/image-wcn.tar

          readarray -t tags <<< "${{ steps.meta.outputs.tags }}"
          for tag in "${tags[@]}"; do
              docker tag wcn:tmp $tag
          done

          docker image push --all-tags ${{ steps.login-ecr.outputs.registry }}/${{ matrix.images.repo_name }}
