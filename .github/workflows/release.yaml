# Generated with ChatGPT o3-mini-high

name: Bump Version, Release & Generate Changelog

on:
  push:
    branches:
      - main
    # Prevent triggering on VERSION-only pushes (avoiding infinite loops)
    paths-ignore:
      - 'VERSION'

jobs:
  bump-and-release:
    runs-on: ubuntu-latest
    concurrency:
      group: "bump-version-and-release"
      cancel-in-progress: true

    steps:
      # 1. Check all commit messages in the push.
      #    If every commit starts with "chore:" or "refactor:" (with optional scopes), skip the run.
      - name: Check commit messages for release-worthy changes
        id: check_commits
        run: |
          SKIP="true"
          # Loop over all commit messages from the event payload.
          for msg in $(jq -r '.commits[].message' "$GITHUB_EVENT_PATH"); do
            # If any commit message does NOT start with "chore:" or "refactor:" (with optional scope),
            # then the run should not be skipped.
            if [[ ! "$msg" =~ ^(chore(\(.*\))?:|refactor(\(.*\))?:) ]]; then
              SKIP="false"
              break
            fi
          done
          echo "skip=$SKIP" >> $GITHUB_OUTPUT
          echo "Should skip entire run: $SKIP"
        shell: bash

      # All subsequent steps run only if at least one commit is not a chore/refactor.
      - name: Checkout repository
        if: ${{ steps.check_commits.outputs.skip != 'true' }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_PAT }}

      - name: Get last tag
        if: ${{ steps.check_commits.outputs.skip != 'true' }}
        id: last_tag
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: $LAST_TAG"
          echo "::set-output name=last_tag::$LAST_TAG"

      - name: Generate VERSION file
        if: ${{ steps.check_commits.outputs.skip != 'true' }}
        id: generate_version
        run: |
          TODAY=$(date +"%y%m%d")
          if [ -f VERSION ]; then
            CURRENT_VERSION=$(cat VERSION)
            CURRENT_DATE=$(echo "$CURRENT_VERSION" | cut -d. -f1)
            CURRENT_MINOR=$(echo "$CURRENT_VERSION" | cut -d. -f2)
            if [ "$CURRENT_DATE" = "$TODAY" ]; then
              NEW_MINOR=$((CURRENT_MINOR + 1))
              NEW_VERSION="${TODAY}.${NEW_MINOR}"
            else
              NEW_VERSION="${TODAY}.0"
            fi
          else
            NEW_VERSION="${TODAY}.0"
          fi
          echo "New version: ${NEW_VERSION}"
          echo "${NEW_VERSION}" > VERSION
          echo "::set-output name=version::${NEW_VERSION}"

      - name: Commit VERSION file
        if: ${{ steps.check_commits.outputs.skip != 'true' }}
        run: |
          git config user.name "Github Bot"
          git config user.email "github@walletconnect.com"
          git add VERSION
          if ! git diff --cached --quiet; then
            git commit -m "Bump version to $(cat VERSION)"
            git push
          else
            echo "No changes in VERSION file to commit."
          fi

      - name: Generate Release Notes
        if: ${{ steps.check_commits.outputs.skip != 'true' }}
        id: release_notes
        run: |
          LAST_TAG=${{ steps.last_tag.outputs.last_tag }}
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"* %s" -- . ':(exclude)VERSION')
          else
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"* %s" -- . ':(exclude)VERSION')
          fi
          echo "Changelog generated:"
          echo "$CHANGELOG"
          echo "::set-output name=changelog::$CHANGELOG"

      - name: Tag new version
        if: ${{ steps.check_commits.outputs.skip != 'true' }}
        run: |
          NEW_VERSION=$(cat VERSION)
          git tag "$NEW_VERSION"
          git push origin "$NEW_VERSION"

      - name: Create GitHub Release
        if: ${{ steps.check_commits.outputs.skip != 'true' }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.generate_version.outputs.version }}
          body: ${{ steps.release_notes.outputs.changelog }}
